[
	{
		"section": "attestation",
		"methods": [
			{
				"name": "removeClaim",
				"args": "holder: `AccountId`, topic: `AttestationTopic`"
			},
			{
				"name": "setClaim",
				"args": "holder: `AccountId`, topic: `AttestationTopic`, value: `AttestationValue`"
			}
		]
	},
	{
		"section": "authorship",
		"methods": [{ "name": "setUncles", "args": "new_uncles: `Vec<Header>`" }]
	},
	{
		"section": "babe",
		"methods": [
			{
				"name": "reportEquivocation",
				"args": "equivocation_proof: `BabeEquivocationProof`, key_owner_proof: `KeyOwnerProof`"
			},
			{
				"name": "reportEquivocationUnsigned",
				"args": "equivocation_proof: `BabeEquivocationProof`, key_owner_proof: `KeyOwnerProof`"
			}
		]
	},
	{
		"section": "cennzx",
		"methods": [
			{
				"name": "addLiquidity",
				"args": "asset_id: `Compact<AssetId>`, min_liquidity: `Compact<BalanceOf>`, max_asset_amount: `Compact<BalanceOf>`, core_amount: `Compact<BalanceOf>`"
			},
			{
				"name": "buyAsset",
				"args": "recipient: `Option<AccountId>`, asset_to_sell: `Compact<AssetId>`, asset_to_buy: `Compact<AssetId>`, buy_amount: `Compact<BalanceOf>`, maximum_sell: `Compact<BalanceOf>`"
			},
			{
				"name": "removeLiquidity",
				"args": "asset_id: `Compact<AssetId>`, liquidity_to_withdraw: `Compact<BalanceOf>`, min_asset_withdraw: `Compact<BalanceOf>`, min_core_withdraw: `Compact<BalanceOf>`"
			},
			{
				"name": "sellAsset",
				"args": "recipient: `Option<AccountId>`, asset_to_sell: `Compact<AssetId>`, asset_to_buy: `Compact<AssetId>`, sell_amount: `Compact<BalanceOf>`, minimum_buy: `Compact<BalanceOf>`"
			},
			{ "name": "setFeeRate", "args": "new_fee_rate: `FeeRate`" }
		]
	},
	{
		"section": "genericAsset",
		"methods": [
			{
				"name": "burn",
				"args": "asset_id: `Compact<AssetId>`, target: `AccountId`, amount: `Balance`"
			},
			{
				"name": "create",
				"args": "owner: `AccountId`, options: `AssetOptions`, info: `AssetInfo`"
			},
			{
				"name": "createReserved",
				"args": "asset_id: `AssetId`, options: `AssetOptions`, info: `AssetInfo`"
			},
			{
				"name": "mint",
				"args": "asset_id: `Compact<AssetId>`, to: `AccountId`, amount: `Balance`"
			},
			{
				"name": "transfer",
				"args": "asset_id: `Compact<AssetId>`, to: `AccountId`, amount: `Compact<Balance>`"
			},
			{
				"name": "updateAssetInfo",
				"args": "asset_id: `Compact<AssetId>`, info: `AssetInfo`"
			},
			{
				"name": "updatePermission",
				"args": "asset_id: `Compact<AssetId>`, new_permission: `PermissionLatest`"
			}
		]
	},
	{
		"section": "grandpa",
		"methods": [
			{
				"name": "noteStalled",
				"args": "delay: `BlockNumber`, best_finalized_block_number: `BlockNumber`"
			},
			{
				"name": "reportEquivocation",
				"args": "equivocation_proof: `GrandpaEquivocationProof`, key_owner_proof: `KeyOwnerProof`"
			},
			{
				"name": "reportEquivocationUnsigned",
				"args": "equivocation_proof: `GrandpaEquivocationProof`, key_owner_proof: `KeyOwnerProof`"
			}
		]
	},
	{
		"section": "identity",
		"methods": [
			{ "name": "addRegistrar", "args": "account: `AccountId`" },
			{ "name": "addSub", "args": "sub: `LookupSource`, data: `Data`" },
			{ "name": "cancelRequest", "args": "reg_index: `RegistrarIndex`" },
			{ "name": "clearIdentity", "args": "" },
			{ "name": "killIdentity", "args": "target: `LookupSource`" },
			{
				"name": "provideJudgement",
				"args": "reg_index: `Compact<RegistrarIndex>`, target: `LookupSource`, judgement: `IdentityJudgement`"
			},
			{ "name": "quitSub", "args": "" },
			{ "name": "removeSub", "args": "sub: `LookupSource`" },
			{ "name": "renameSub", "args": "sub: `LookupSource`, data: `Data`" },
			{
				"name": "requestJudgement",
				"args": "reg_index: `Compact<RegistrarIndex>`, max_fee: `Compact<BalanceOf>`"
			},
			{
				"name": "setAccountId",
				"args": "index: `Compact<RegistrarIndex>`, new: `AccountId`"
			},
			{
				"name": "setFee",
				"args": "index: `Compact<RegistrarIndex>`, fee: `Compact<BalanceOf>`"
			},
			{
				"name": "setFields",
				"args": "index: `Compact<RegistrarIndex>`, fields: `IdentityFields`"
			},
			{ "name": "setIdentity", "args": "info: `IdentityInfo`" },
			{ "name": "setSubs", "args": "subs: `Vec<(AccountId,Data)>`" }
		]
	},
	{
		"section": "imOnline",
		"methods": [
			{
				"name": "heartbeat",
				"args": "heartbeat: `Heartbeat`, _signature: `Signature`"
			}
		]
	},
	{
		"section": "multisig",
		"methods": [
			{
				"name": "approveAsMulti",
				"args": "threshold: `u16`, other_signatories: `Vec<AccountId>`, maybe_timepoint: `Option<Timepoint>`, call_hash: `[u8;32]`, max_weight: `Weight`"
			},
			{
				"name": "asMulti",
				"args": "threshold: `u16`, other_signatories: `Vec<AccountId>`, maybe_timepoint: `Option<Timepoint>`, call: `OpaqueCall`, store_call: `bool`, max_weight: `Weight`"
			},
			{
				"name": "asMultiThreshold1",
				"args": "other_signatories: `Vec<AccountId>`, call: `Call`"
			},
			{
				"name": "cancelAsMulti",
				"args": "threshold: `u16`, other_signatories: `Vec<AccountId>`, timepoint: `Timepoint`, call_hash: `[u8;32]`"
			}
		]
	},
	{
		"section": "nft",
		"methods": [
			{
				"name": "auction",
				"args": "token_id: `TokenId`, payment_asset: `AssetId`, reserve_price: `Balance`, duration: `Option<BlockNumber>`"
			},
			{
				"name": "auctionBundle",
				"args": "tokens: `Vec<TokenId>`, payment_asset: `AssetId`, reserve_price: `Balance`, duration: `Option<BlockNumber>`"
			},
			{ "name": "bid", "args": "listing_id: `ListingId`, amount: `Balance`" },
			{ "name": "burn", "args": "token_id: `TokenId`" },
			{
				"name": "burnBatch",
				"args": "collection_id: `CollectionId`, series_id: `SeriesId`, serial_numbers: `Vec<SerialNumber>`"
			},
			{ "name": "buy", "args": "listing_id: `ListingId`" },
			{ "name": "cancelSale", "args": "listing_id: `ListingId`" },
			{
				"name": "createCollection",
				"args": "name: `CollectionNameType`, metadata_base_uri: `Option<MetadataBaseURI>`, royalties_schedule: `Option<RoyaltiesSchedule>`"
			},
			{
				"name": "mintAdditional",
				"args": "collection_id: `CollectionId`, series_id: `SeriesId`, quantity: `TokenCount`, owner: `Option<AccountId>`"
			},
			{
				"name": "mintSeries",
				"args": "collection_id: `CollectionId`, quantity: `TokenCount`, owner: `Option<AccountId>`, attributes: `Vec<NFTAttributeValue>`, metadata_path: `Option<Bytes>`, royalties_schedule: `Option<RoyaltiesSchedule>`"
			},
			{
				"name": "mintUnique",
				"args": "collection_id: `CollectionId`, owner: `Option<AccountId>`, attributes: `Vec<NFTAttributeValue>`, metadata_path: `Option<Bytes>`, royalties_schedule: `Option<RoyaltiesSchedule>`"
			},
			{
				"name": "sell",
				"args": "token_id: `TokenId`, buyer: `Option<AccountId>`, payment_asset: `AssetId`, fixed_price: `Balance`, duration: `Option<BlockNumber>`"
			},
			{
				"name": "sellBundle",
				"args": "tokens: `Vec<TokenId>`, buyer: `Option<AccountId>`, payment_asset: `AssetId`, fixed_price: `Balance`, duration: `Option<BlockNumber>`"
			},
			{
				"name": "setOwner",
				"args": "collection_id: `CollectionId`, new_owner: `AccountId`"
			},
			{
				"name": "transfer",
				"args": "token_id: `TokenId`, new_owner: `AccountId`"
			},
			{
				"name": "transferBatch",
				"args": "tokens: `Vec<TokenId>`, new_owner: `AccountId`"
			}
		]
	},
	{ "section": "offences", "methods": [] },
	{
		"section": "rewards",
		"methods": [
			{ "name": "forceNewFiscalEra", "args": "" },
			{ "name": "setDevelopmentFundTake", "args": "new_take_percent: `u32`" },
			{
				"name": "setInflationRate",
				"args": "numerator: `u64`, denominator: `u64`"
			}
		]
	},
	{
		"section": "scheduler",
		"methods": [
			{ "name": "cancel", "args": "when: `BlockNumber`, index: `u32`" },
			{ "name": "cancelNamed", "args": "id: `Bytes`" },
			{
				"name": "schedule",
				"args": "when: `BlockNumber`, maybe_periodic: `Option<Period>`, priority: `Priority`, call: `Call`"
			},
			{
				"name": "scheduleAfter",
				"args": "after: `BlockNumber`, maybe_periodic: `Option<Period>`, priority: `Priority`, call: `Call`"
			},
			{
				"name": "scheduleNamed",
				"args": "id: `Bytes`, when: `BlockNumber`, maybe_periodic: `Option<Period>`, priority: `Priority`, call: `Call`"
			},
			{
				"name": "scheduleNamedAfter",
				"args": "id: `Bytes`, after: `BlockNumber`, maybe_periodic: `Option<Period>`, priority: `Priority`, call: `Call`"
			}
		]
	},
	{
		"section": "session",
		"methods": [
			{ "name": "purgeKeys", "args": "" },
			{ "name": "setKeys", "args": "keys: `Keys`, proof: `Bytes`" }
		]
	},
	{
		"section": "staking",
		"methods": [
			{
				"name": "bond",
				"args": "controller: `AccountId`, value: `Compact<BalanceOf>`, payee: `RewardDestination`"
			},
			{ "name": "bondExtra", "args": "max_additional: `Compact<BalanceOf>`" },
			{
				"name": "cancelDeferredSlash",
				"args": "era: `EraIndex`, slash_indices: `Vec<u32>`"
			},
			{ "name": "chill", "args": "" },
			{ "name": "forceNewEra", "args": "" },
			{ "name": "forceNewEraAlways", "args": "" },
			{ "name": "forceNoEras", "args": "" },
			{ "name": "forceUnstake", "args": "stash: `AccountId`" },
			{
				"name": "increaseValidatorCount",
				"args": "additional: `Compact<u32>`"
			},
			{ "name": "nominate", "args": "targets: `Vec<AccountId>`" },
			{ "name": "reapStash", "args": "stash: `AccountId`" },
			{ "name": "rebond", "args": "value: `Compact<BalanceOf>`" },
			{ "name": "setController", "args": "controller: `AccountId`" },
			{
				"name": "setHistoryDepth",
				"args": "new_history_depth: `Compact<EraIndex>`, _era_items_deleted: `Compact<u32>`"
			},
			{ "name": "setInvulnerables", "args": "validators: `Vec<AccountId>`" },
			{ "name": "setMinimumBond", "args": "value: `BalanceOf`" },
			{ "name": "setPayee", "args": "payee: `RewardDestination`" },
			{ "name": "setValidatorCount", "args": "new: `Compact<u32>`" },
			{
				"name": "submitElectionSolution",
				"args": "winners: `Vec<ValidatorIndex>`, compact: `CompactAssignments`, score: `ElectionScore`, era: `EraIndex`, size: `ElectionSize`"
			},
			{
				"name": "submitElectionSolutionUnsigned",
				"args": "winners: `Vec<ValidatorIndex>`, compact: `CompactAssignments`, score: `ElectionScore`, era: `EraIndex`, size: `ElectionSize`"
			},
			{ "name": "unbond", "args": "value: `Compact<BalanceOf>`" },
			{ "name": "validate", "args": "prefs: `ValidatorPrefs`" },
			{ "name": "withdrawUnbonded", "args": "" }
		]
	},
	{
		"section": "sudo",
		"methods": [
			{ "name": "setKey", "args": "new: `LookupSource`" },
			{ "name": "sudo", "args": "call: `Call`" },
			{ "name": "sudoAs", "args": "who: `LookupSource`, call: `Call`" },
			{
				"name": "sudoUncheckedWeight",
				"args": "call: `Call`, _weight: `Weight`"
			}
		]
	},
	{
		"section": "system",
		"methods": [
			{ "name": "fillBlock", "args": "_ratio: `Perbill`" },
			{ "name": "killPrefix", "args": "prefix: `Key`, _subkeys: `u32`" },
			{ "name": "killStorage", "args": "keys: `Vec<Key>`" },
			{ "name": "remark", "args": "_remark: `Bytes`" },
			{
				"name": "setChangesTrieConfig",
				"args": "changes_trie_config: `Option<ChangesTrieConfiguration>`"
			},
			{ "name": "setCode", "args": "code: `Bytes`" },
			{ "name": "setCodeWithoutChecks", "args": "code: `Bytes`" },
			{ "name": "setHeapPages", "args": "pages: `u64`" },
			{ "name": "setStorage", "args": "items: `Vec<KeyValue>`" },
			{ "name": "suicide", "args": "" }
		]
	},
	{
		"section": "timestamp",
		"methods": [{ "name": "set", "args": "now: `Compact<Moment>`" }]
	},
	{
		"section": "treasury",
		"methods": [
			{
				"name": "acceptCurator",
				"args": "bounty_id: `Compact<ProposalIndex>`"
			},
			{
				"name": "approveBounty",
				"args": "bounty_id: `Compact<ProposalIndex>`"
			},
			{
				"name": "approveProposal",
				"args": "proposal_id: `Compact<ProposalIndex>`"
			},
			{
				"name": "awardBounty",
				"args": "bounty_id: `Compact<ProposalIndex>`, beneficiary: `LookupSource`"
			},
			{ "name": "claimBounty", "args": "bounty_id: `Compact<BountyIndex>`" },
			{ "name": "closeBounty", "args": "bounty_id: `Compact<BountyIndex>`" },
			{ "name": "closeTip", "args": "hash: `Hash`" },
			{
				"name": "extendBountyExpiry",
				"args": "bounty_id: `Compact<BountyIndex>`, _remark: `Bytes`"
			},
			{
				"name": "proposeBounty",
				"args": "value: `Compact<BalanceOf>`, description: `Bytes`"
			},
			{
				"name": "proposeCurator",
				"args": "bounty_id: `Compact<ProposalIndex>`, curator: `LookupSource`, fee: `Compact<BalanceOf>`"
			},
			{
				"name": "proposeSpend",
				"args": "value: `Compact<BalanceOf>`, beneficiary: `LookupSource`"
			},
			{
				"name": "rejectProposal",
				"args": "proposal_id: `Compact<ProposalIndex>`"
			},
			{ "name": "reportAwesome", "args": "reason: `Bytes`, who: `AccountId`" },
			{ "name": "retractTip", "args": "hash: `Hash`" },
			{
				"name": "tip",
				"args": "hash: `Hash`, tip_value: `Compact<BalanceOf>`"
			},
			{
				"name": "tipNew",
				"args": "reason: `Bytes`, who: `AccountId`, tip_value: `Compact<BalanceOf>`"
			},
			{
				"name": "unassignCurator",
				"args": "bounty_id: `Compact<ProposalIndex>`"
			}
		]
	},
	{
		"section": "utility",
		"methods": [
			{ "name": "asDerivative", "args": "index: `u16`, call: `Call`" },
			{ "name": "batch", "args": "calls: `Vec<Call>`" }
		]
	}
]
